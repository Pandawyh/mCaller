  H
  |
H-C-aller
  |
  H

This program is designed to call m6A from nanopore data using the differences between measured and expected currents. It does not yet work with multi-contig/chromosome references and needs to be parallelized. 

REQUIREMENTS:
# python packages
- scikit-learn 
- h5py
- biopython 
- matplotlib
- seaborn
- numpy
- pysam
- scipy
- pandas

# other
- nanopore sequencing data (fast5 format)
- a tsv file with the signal realignment from nanopolish (https://github.com/jts/nanopolish)
- a reference sequence file (fasta)

OPTIONS:

usage: mCaller_nanopolish.py [-h] (-p POSITIONS | -m) -r REFERENCE -f TSV
                             [-t THREADS] [-l LABEL] [-b BASE] [--train] [-v]

-p/--positions [position file]	provide a list of positions at which to classify (default) formatted as 
-m/--motif [nucleobases]	classify at each instance of a particular motif >= 1 base long (eg. A or GATC) in a genome
-r/--reference [ref fasta]	fasta for the reference sequence used for alignment
-f/--tsv [tsv file]		file with signal realignment from nanopolish and scaled event values
-t/--threads [int]		no function, currently, options are 1 or 1
-l/--label [eg. m6A]		label defined positions for training
-b/--base [A or C]		base to classify as methylated or unmethylated 
--train				no current function
-h/--help			print help
-v/--version			print version

PIPELINE FOR METHYLATION DETECTION IN R9 DATA:

1. extract template strand reads from fast5 files using a method that saves the file path in the fastq header, eg.
        nanopolish extract -q -t template > <filename>.fastq
2. align fastq reads to reference assembly (we have used both GraphMap and bwa mem, with comparable results):
        bwa index <reference>.fasta
        bwa mem -x ont2d -t <num_threads> <reference>.fasta <filename>.fastq | samtools view -Sb - | samtools sort -T /tmp/<filename>.sorted -o <filename>.sorted.bam
	samtools index <filename>.sorted.bam
   or 
        graphmap align -r <reference>.fasta -d <filename>.fastq -o <filename>.sam
   	samtools view -bS <filename>.sam | samtools sort -T /tmp/<filename>.sorted -o <filename>.sorted.bam
  	samtools index <filename>.sorted.bam
4. run nanopolish with the following command to save a tsv file and the event values scaled towards the model (ensure nanopolish model files in the same directory):
	nanopolish eventalign -t <num_threads> --samples --scale-events -n -r <filename>.fastq -b <filename>.sorted.bam -g <reference>.fasta --models nanopolish_models.fofn > <filename>.eventalign.tsv
5. run mCaller to detect m6A:
	mCaller_nanopolish.py <-m GATC or -p positions.txt> -r <reference>.fasta -f <filename>.eventalign.tsv -t 1 -l m6A -b A
(This returns a tabbed file with readname, genomic position, position k-mer context, features, strand, and label for training and verification for now. Event extraction and classification will be integrated in future versions)

Results and analysis scripts for the E. coli datasets are provided in the bioRxiv folder. 
